{"ast":null,"code":"import api from './api';\nimport { obtenerClientesSinToken } from './api';\nexport const servicioClientes = {\n  // Obtener todos los clientes\n  obtenerTodos: async (params = {}) => {\n    // Filtra los parámetros vacíos\n    const cleanParams = Object.fromEntries(Object.entries(params).filter(([_, v]) => v !== undefined && v !== ''));\n    const response = await api.get('/clientes', {\n      params: cleanParams\n    });\n    return response.data;\n  },\n  // Obtener cliente por ID\n  obtenerPorId: async id => {\n    const response = await api.get(`/clientes/${id}`);\n    // Log para depuración\n    console.log('Respuesta backend cliente:', response.data);\n    // Soporta ambas estructuras: { data: {...} } o { ... }\n    if (response.data && response.data.data) {\n      return response.data.data;\n    }\n    return response.data;\n  },\n  // Crear nuevo cliente\n  crear: async data => {\n    const response = await api.post('/clientes', data);\n    return response.data;\n  },\n  // Actualizar cliente\n  actualizar: async (id, data) => {\n    const response = await api.put(`/clientes/${id}`, data);\n    return response.data;\n  },\n  // Eliminar cliente\n  eliminar: async id => {\n    const response = await api.delete(`/clientes/${id}`);\n    return response.data;\n  },\n  // Buscar clientes\n  buscar: async query => {\n    const response = await api.get('/clientes/buscar', {\n      params: {\n        q: query\n      }\n    });\n    return response.data;\n  },\n  // Obtener historial de pedidos del cliente\n  obtenerHistorial: async id => {\n    const response = await api.get(`/clientes/${id}/historial`);\n    return response.data;\n  },\n  // Obtener dirección de envío de un cliente\n  obtenerDireccionEnvio: async id => {\n    const response = await api.get(`/clientes/${id}/direccion-envio`);\n    return response.data.data;\n  },\n  // Actualizar o crear dirección de envío de un cliente\n  actualizarDireccionEnvio: async (id, data) => {\n    const response = await api.put(`/clientes/${id}/direccion-envio`, data);\n    return response.data.data;\n  },\n  // Listar todos los clientes (para compatibilidad)\n  listar: async () => {\n    const response = await api.get('/clientes');\n    return response.data;\n  },\n  // Listar clientes sin token (para endpoints públicos)\n  listarSinToken: async () => {\n    return await obtenerClientesSinToken();\n  }\n};","map":{"version":3,"names":["api","obtenerClientesSinToken","servicioClientes","obtenerTodos","params","cleanParams","Object","fromEntries","entries","filter","_","v","undefined","response","get","data","obtenerPorId","id","console","log","crear","post","actualizar","put","eliminar","delete","buscar","query","q","obtenerHistorial","obtenerDireccionEnvio","actualizarDireccionEnvio","listar","listarSinToken"],"sources":["C:/ferrenuevo/fronted/src/servicios/servicioClientes.js"],"sourcesContent":["import api from './api';\r\nimport { obtenerClientesSinToken } from './api';\r\n\r\nexport const servicioClientes = {\r\n  // Obtener todos los clientes\r\n  obtenerTodos: async (params = {}) => {\r\n    // Filtra los parámetros vacíos\r\n    const cleanParams = Object.fromEntries(\r\n      Object.entries(params).filter(([_, v]) => v !== undefined && v !== '')\r\n    );\r\n    const response = await api.get('/clientes', { params: cleanParams });\r\n    return response.data;\r\n  },\r\n\r\n  // Obtener cliente por ID\r\n  obtenerPorId: async (id) => {\r\n    const response = await api.get(`/clientes/${id}`);\r\n    // Log para depuración\r\n    console.log('Respuesta backend cliente:', response.data);\r\n    // Soporta ambas estructuras: { data: {...} } o { ... }\r\n    if (response.data && response.data.data) {\r\n      return response.data.data;\r\n    }\r\n    return response.data;\r\n  },\r\n\r\n  // Crear nuevo cliente\r\n  crear: async (data) => {\r\n    const response = await api.post('/clientes', data);\r\n    return response.data;\r\n  },\r\n\r\n  // Actualizar cliente\r\n  actualizar: async (id, data) => {\r\n    const response = await api.put(`/clientes/${id}`, data);\r\n    return response.data;\r\n  },\r\n\r\n  // Eliminar cliente\r\n  eliminar: async (id) => {\r\n    const response = await api.delete(`/clientes/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Buscar clientes\r\n  buscar: async (query) => {\r\n    const response = await api.get('/clientes/buscar', { params: { q: query } });\r\n    return response.data;\r\n  },\r\n\r\n  // Obtener historial de pedidos del cliente\r\n  obtenerHistorial: async (id) => {\r\n    const response = await api.get(`/clientes/${id}/historial`);\r\n    return response.data;\r\n  },\r\n\r\n  // Obtener dirección de envío de un cliente\r\n  obtenerDireccionEnvio: async (id) => {\r\n    const response = await api.get(`/clientes/${id}/direccion-envio`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Actualizar o crear dirección de envío de un cliente\r\n  actualizarDireccionEnvio: async (id, data) => {\r\n    const response = await api.put(`/clientes/${id}/direccion-envio`, data);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Listar todos los clientes (para compatibilidad)\r\n  listar: async () => {\r\n    const response = await api.get('/clientes');\r\n    return response.data;\r\n  },\r\n\r\n  // Listar clientes sin token (para endpoints públicos)\r\n  listarSinToken: async () => {\r\n    return await obtenerClientesSinToken();\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB,SAASC,uBAAuB,QAAQ,OAAO;AAE/C,OAAO,MAAMC,gBAAgB,GAAG;EAC9B;EACAC,YAAY,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IACnC;IACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,WAAW,CACpCD,MAAM,CAACE,OAAO,CAACJ,MAAM,CAAC,CAACK,MAAM,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAKA,CAAC,KAAKC,SAAS,IAAID,CAAC,KAAK,EAAE,CACvE,CAAC;IACD,MAAME,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,WAAW,EAAE;MAAEV,MAAM,EAAEC;IAAY,CAAC,CAAC;IACpE,OAAOQ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,YAAY,EAAE,MAAOC,EAAE,IAAK;IAC1B,MAAMJ,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,aAAaG,EAAE,EAAE,CAAC;IACjD;IACAC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEN,QAAQ,CAACE,IAAI,CAAC;IACxD;IACA,IAAIF,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;MACvC,OAAOF,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B;IACA,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAK,KAAK,EAAE,MAAOL,IAAI,IAAK;IACrB,MAAMF,QAAQ,GAAG,MAAMb,GAAG,CAACqB,IAAI,CAAC,WAAW,EAAEN,IAAI,CAAC;IAClD,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAO,UAAU,EAAE,MAAAA,CAAOL,EAAE,EAAEF,IAAI,KAAK;IAC9B,MAAMF,QAAQ,GAAG,MAAMb,GAAG,CAACuB,GAAG,CAAC,aAAaN,EAAE,EAAE,EAAEF,IAAI,CAAC;IACvD,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAS,QAAQ,EAAE,MAAOP,EAAE,IAAK;IACtB,MAAMJ,QAAQ,GAAG,MAAMb,GAAG,CAACyB,MAAM,CAAC,aAAaR,EAAE,EAAE,CAAC;IACpD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAW,MAAM,EAAE,MAAOC,KAAK,IAAK;IACvB,MAAMd,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,kBAAkB,EAAE;MAAEV,MAAM,EAAE;QAAEwB,CAAC,EAAED;MAAM;IAAE,CAAC,CAAC;IAC5E,OAAOd,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAc,gBAAgB,EAAE,MAAOZ,EAAE,IAAK;IAC9B,MAAMJ,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,aAAaG,EAAE,YAAY,CAAC;IAC3D,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAe,qBAAqB,EAAE,MAAOb,EAAE,IAAK;IACnC,MAAMJ,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,aAAaG,EAAE,kBAAkB,CAAC;IACjE,OAAOJ,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAgB,wBAAwB,EAAE,MAAAA,CAAOd,EAAE,EAAEF,IAAI,KAAK;IAC5C,MAAMF,QAAQ,GAAG,MAAMb,GAAG,CAACuB,GAAG,CAAC,aAAaN,EAAE,kBAAkB,EAAEF,IAAI,CAAC;IACvE,OAAOF,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAiB,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,MAAMnB,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,WAAW,CAAC;IAC3C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAkB,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,OAAO,MAAMhC,uBAAuB,CAAC,CAAC;EACxC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}