{"ast":null,"code":"import _objectSpread from\"C:/ferrenuevo/fronted/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{productosAPI}from'./api';export const servicioProductos={// Obtener todos los productos\nobtenerTodos:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{// Usar el endpoint público de productos\nconst response=await productosAPI.obtenerTodos(params);// Adaptar la respuesta para que sea compatible con el resto del frontend\nif(response.data&&Array.isArray(response.data.data)){return{success:true,data:response.data.data};}else if(response.data&&Array.isArray(response.data)){return{success:true,data:response.data};}else{return{success:false,data:[]};}}catch(error){console.error('Error al obtener productos:',error);throw error;}},// Obtener producto por ID\nobtenerPorId:async id=>{try{const response=await productosAPI.obtenerPorId(id);return response;}catch(error){console.error('Error al obtener producto:',error);throw error;}},// Crear nuevo producto\ncrear:async data=>{try{const response=await productosAPI.crear(data);return response;}catch(error){console.error('Error al crear producto:',error);throw error;}},// Actualizar producto\nactualizar:async(id,data)=>{try{const response=await productosAPI.actualizar(id,data);return response;}catch(error){console.error('Error al actualizar producto:',error);throw error;}},// Eliminar producto\neliminar:async id=>{try{const response=await productosAPI.eliminar(id);return response;}catch(error){console.error('Error al eliminar producto:',error);throw error;}},// Buscar productos\nbuscar:async function(query){let filtros=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{// Usar el endpoint de búsqueda del backend\nconst params=_objectSpread({q:query},filtros);const response=await productosAPI.obtenerTodos(params);return response;}catch(error){console.error('Error al buscar productos:',error);throw error;}},// Obtener categorías\nobtenerCategorias:async()=>{try{const response=await productosAPI.obtenerCategorias();return response;}catch(error){console.error('Error al obtener categorías:',error);throw error;}},// Obtener marcas\nobtenerMarcas:async()=>{try{const response=await productosAPI.obtenerMarcas();return response;}catch(error){console.error('Error al obtener marcas:',error);throw error;}},// Carga masiva de productos\ncargaMasiva:async archivoCsv=>{try{const response=await productosAPI.cargarMasiva(archivoCsv);return response;}catch(error){console.error('Error en carga masiva:',error);throw error;}}};","map":{"version":3,"names":["productosAPI","servicioProductos","obtenerTodos","params","arguments","length","undefined","response","data","Array","isArray","success","error","console","obtenerPorId","id","crear","actualizar","eliminar","buscar","query","filtros","_objectSpread","q","obtenerCategorias","obtenerMarcas","cargaMasiva","archivoCsv","cargarMasiva"],"sources":["C:/ferrenuevo/fronted/src/servicios/servicioProductos.js"],"sourcesContent":["import { productosAPI } from './api';\r\n\r\nexport const servicioProductos = {\r\n  // Obtener todos los productos\r\n  obtenerTodos: async (params = {}) => {\r\n    try {\r\n      // Usar el endpoint público de productos\r\n      const response = await productosAPI.obtenerTodos(params);\r\n      // Adaptar la respuesta para que sea compatible con el resto del frontend\r\n      if (response.data && Array.isArray(response.data.data)) {\r\n        return { success: true, data: response.data.data };\r\n      } else if (response.data && Array.isArray(response.data)) {\r\n        return { success: true, data: response.data };\r\n      } else {\r\n        return { success: false, data: [] };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener productos:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener producto por ID\r\n  obtenerPorId: async (id) => {\r\n    try {\r\n      const response = await productosAPI.obtenerPorId(id);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al obtener producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Crear nuevo producto\r\n  crear: async (data) => {\r\n    try {\r\n      const response = await productosAPI.crear(data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al crear producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Actualizar producto\r\n  actualizar: async (id, data) => {\r\n    try {\r\n      const response = await productosAPI.actualizar(id, data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al actualizar producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Eliminar producto\r\n  eliminar: async (id) => {\r\n    try {\r\n      const response = await productosAPI.eliminar(id);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al eliminar producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Buscar productos\r\n  buscar: async (query, filtros = {}) => {\r\n    try {\r\n      // Usar el endpoint de búsqueda del backend\r\n      const params = { q: query, ...filtros };\r\n      const response = await productosAPI.obtenerTodos(params);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al buscar productos:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener categorías\r\n  obtenerCategorias: async () => {\r\n    try {\r\n      const response = await productosAPI.obtenerCategorias();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al obtener categorías:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener marcas\r\n  obtenerMarcas: async () => {\r\n    try {\r\n      const response = await productosAPI.obtenerMarcas();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al obtener marcas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Carga masiva de productos\r\n  cargaMasiva: async (archivoCsv) => {\r\n    try {\r\n      const response = await productosAPI.cargarMasiva(archivoCsv);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error en carga masiva:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}