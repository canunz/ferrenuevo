{"ast":null,"code":"import { productosAPI } from './api';\nexport const servicioProductos = {\n  // Obtener todos los productos con promociones procesadas\n  obtenerTodos: async (params = {}) => {\n    try {\n      const response = await productosAPI.obtenerTodos(params);\n      let productos = [];\n      if (response.data && Array.isArray(response.data.data)) {\n        productos = response.data.data;\n      } else if (response.data && Array.isArray(response.data)) {\n        productos = response.data;\n      }\n      console.log('üîç Productos obtenidos del backend:', productos.length);\n\n      // NO procesamos aqu√≠ las promociones - ya vienen procesadas del backend\n      return {\n        success: true,\n        data: productos\n      };\n    } catch (error) {\n      console.error('Error al obtener productos:', error);\n      throw error;\n    }\n  },\n  // Obtener producto por ID - YA VIENE CON PROMOCIONES PROCESADAS\n  obtenerPorId: async id => {\n    try {\n      console.log(`üîç Obteniendo producto ID: ${id}`);\n      const response = await productosAPI.obtenerPorId(id);\n      if (response.data) {\n        console.log('‚úÖ Producto obtenido:', response.data.nombre);\n        console.log('üí∞ Precio:', response.data.precio);\n        console.log('üéØ Tiene promoci√≥n:', response.data.tiene_promocion);\n        console.log('üíµ Precio oferta:', response.data.precio_oferta);\n\n        // El backend ya proces√≥ las promociones, solo devolvemos los datos\n        return response;\n      } else {\n        throw new Error('Producto no encontrado');\n      }\n    } catch (error) {\n      console.error('Error al obtener producto:', error);\n      throw error;\n    }\n  },\n  // Crear nuevo producto\n  crear: async data => {\n    try {\n      const response = await productosAPI.crear(data);\n      return response;\n    } catch (error) {\n      console.error('Error al crear producto:', error);\n      throw error;\n    }\n  },\n  // Actualizar producto\n  actualizar: async (id, data) => {\n    try {\n      const response = await productosAPI.actualizar(id, data);\n      return response;\n    } catch (error) {\n      console.error('Error al actualizar producto:', error);\n      throw error;\n    }\n  },\n  // Eliminar producto\n  eliminar: async id => {\n    try {\n      const response = await productosAPI.eliminar(id);\n      return response;\n    } catch (error) {\n      console.error('Error al eliminar producto:', error);\n      throw error;\n    }\n  },\n  // Buscar productos\n  buscar: async (query, filtros = {}) => {\n    try {\n      const params = {\n        q: query,\n        ...filtros\n      };\n      const response = await productosAPI.obtenerTodos(params);\n      return response;\n    } catch (error) {\n      console.error('Error al buscar productos:', error);\n      throw error;\n    }\n  },\n  // Obtener categor√≠as\n  obtenerCategorias: async () => {\n    try {\n      const response = await productosAPI.obtenerCategorias();\n      return response;\n    } catch (error) {\n      console.error('Error al obtener categor√≠as:', error);\n      throw error;\n    }\n  },\n  // Obtener marcas\n  obtenerMarcas: async () => {\n    try {\n      const response = await productosAPI.obtenerMarcas();\n      return response;\n    } catch (error) {\n      console.error('Error al obtener marcas:', error);\n      throw error;\n    }\n  },\n  // Subir ficha t√©cnica PDF\n  subirFichaTecnica: async (id, archivoFicha) => {\n    try {\n      const response = await productosAPI.subirFichaTecnica(id, archivoFicha);\n      return response;\n    } catch (error) {\n      console.error('Error al subir ficha t√©cnica:', error);\n      throw error;\n    }\n  }\n};\nexport default servicioProductos;","map":{"version":3,"names":["productosAPI","servicioProductos","obtenerTodos","params","response","productos","data","Array","isArray","console","log","length","success","error","obtenerPorId","id","nombre","precio","tiene_promocion","precio_oferta","Error","crear","actualizar","eliminar","buscar","query","filtros","q","obtenerCategorias","obtenerMarcas","subirFichaTecnica","archivoFicha"],"sources":["C:/ferrenuevo/fronted/src/servicios/servicioProductos.js"],"sourcesContent":["import { productosAPI } from './api';\r\n\r\nexport const servicioProductos = {\r\n  // Obtener todos los productos con promociones procesadas\r\n  obtenerTodos: async (params = {}) => {\r\n    try {\r\n      const response = await productosAPI.obtenerTodos(params);\r\n      let productos = [];\r\n      \r\n      if (response.data && Array.isArray(response.data.data)) {\r\n        productos = response.data.data;\r\n      } else if (response.data && Array.isArray(response.data)) {\r\n        productos = response.data;\r\n      }\r\n      \r\n      console.log('üîç Productos obtenidos del backend:', productos.length);\r\n      \r\n      // NO procesamos aqu√≠ las promociones - ya vienen procesadas del backend\r\n      return { success: true, data: productos };\r\n    } catch (error) {\r\n      console.error('Error al obtener productos:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener producto por ID - YA VIENE CON PROMOCIONES PROCESADAS\r\n  obtenerPorId: async (id) => {\r\n    try {\r\n      console.log(`üîç Obteniendo producto ID: ${id}`);\r\n      const response = await productosAPI.obtenerPorId(id);\r\n      \r\n      if (response.data) {\r\n        console.log('‚úÖ Producto obtenido:', response.data.nombre);\r\n        console.log('üí∞ Precio:', response.data.precio);\r\n        console.log('üéØ Tiene promoci√≥n:', response.data.tiene_promocion);\r\n        console.log('üíµ Precio oferta:', response.data.precio_oferta);\r\n        \r\n        // El backend ya proces√≥ las promociones, solo devolvemos los datos\r\n        return response;\r\n      } else {\r\n        throw new Error('Producto no encontrado');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Crear nuevo producto\r\n  crear: async (data) => {\r\n    try {\r\n      const response = await productosAPI.crear(data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al crear producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Actualizar producto\r\n  actualizar: async (id, data) => {\r\n    try {\r\n      const response = await productosAPI.actualizar(id, data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al actualizar producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Eliminar producto\r\n  eliminar: async (id) => {\r\n    try {\r\n      const response = await productosAPI.eliminar(id);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al eliminar producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Buscar productos\r\n  buscar: async (query, filtros = {}) => {\r\n    try {\r\n      const params = { q: query, ...filtros };\r\n      const response = await productosAPI.obtenerTodos(params);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al buscar productos:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener categor√≠as\r\n  obtenerCategorias: async () => {\r\n    try {\r\n      const response = await productosAPI.obtenerCategorias();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al obtener categor√≠as:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener marcas\r\n  obtenerMarcas: async () => {\r\n    try {\r\n      const response = await productosAPI.obtenerMarcas();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al obtener marcas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Subir ficha t√©cnica PDF\r\n  subirFichaTecnica: async (id, archivoFicha) => {\r\n    try {\r\n      const response = await productosAPI.subirFichaTecnica(id, archivoFicha);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al subir ficha t√©cnica:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default servicioProductos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}