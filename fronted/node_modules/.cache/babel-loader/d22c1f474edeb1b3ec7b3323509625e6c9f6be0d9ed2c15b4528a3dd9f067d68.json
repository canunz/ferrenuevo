{"ast":null,"code":"import api from './api';\nexport const servicioClientes = {\n  // Obtener todos los clientes\n  obtenerTodos: async (params = {}) => {\n    // Filtra los parámetros vacíos\n    const cleanParams = Object.fromEntries(Object.entries(params).filter(([_, v]) => v !== undefined && v !== ''));\n    const response = await api.get('/clientes', {\n      params: cleanParams\n    });\n    return response.data;\n  },\n  // Obtener cliente por ID\n  obtenerPorId: async id => {\n    const response = await api.get(`/clientes/${id}`);\n    return response.data.data;\n  },\n  // Crear nuevo cliente\n  crear: async data => {\n    const response = await api.post('/clientes', data);\n    return response.data;\n  },\n  // Actualizar cliente\n  actualizar: async (id, data) => {\n    const response = await api.put(`/clientes/${id}`, data);\n    return response.data;\n  },\n  // Eliminar cliente\n  eliminar: async id => {\n    const response = await api.delete(`/clientes/${id}`);\n    return response.data;\n  },\n  // Buscar clientes\n  buscar: async query => {\n    const response = await api.get('/clientes/buscar', {\n      params: {\n        q: query\n      }\n    });\n    return response.data;\n  },\n  // Obtener historial de pedidos del cliente\n  obtenerHistorial: async id => {\n    const response = await api.get(`/clientes/${id}/historial`);\n    return response.data;\n  },\n  listar: () => api.get('/clientes'),\n  obtenerPorId: id => api.get(`/clientes/${id}`),\n  crear: datos => api.post('/clientes', datos),\n  actualizar: (id, datos) => api.put(`/clientes/${id}`, datos),\n  eliminar: id => api.delete(`/clientes/${id}`)\n};","map":{"version":3,"names":["api","servicioClientes","obtenerTodos","params","cleanParams","Object","fromEntries","entries","filter","_","v","undefined","response","get","data","obtenerPorId","id","crear","post","actualizar","put","eliminar","delete","buscar","query","q","obtenerHistorial","listar","datos"],"sources":["C:/ferrenuevo/fronted/src/servicios/servicioClientes.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const servicioClientes = {\r\n  // Obtener todos los clientes\r\n  obtenerTodos: async (params = {}) => {\r\n    // Filtra los parámetros vacíos\r\n    const cleanParams = Object.fromEntries(\r\n      Object.entries(params).filter(([_, v]) => v !== undefined && v !== '')\r\n    );\r\n    const response = await api.get('/clientes', { params: cleanParams });\r\n    return response.data;\r\n  },\r\n\r\n  // Obtener cliente por ID\r\n  obtenerPorId: async (id) => {\r\n    const response = await api.get(`/clientes/${id}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Crear nuevo cliente\r\n  crear: async (data) => {\r\n    const response = await api.post('/clientes', data);\r\n    return response.data;\r\n  },\r\n\r\n  // Actualizar cliente\r\n  actualizar: async (id, data) => {\r\n    const response = await api.put(`/clientes/${id}`, data);\r\n    return response.data;\r\n  },\r\n\r\n  // Eliminar cliente\r\n  eliminar: async (id) => {\r\n    const response = await api.delete(`/clientes/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Buscar clientes\r\n  buscar: async (query) => {\r\n    const response = await api.get('/clientes/buscar', { params: { q: query } });\r\n    return response.data;\r\n  },\r\n\r\n  // Obtener historial de pedidos del cliente\r\n  obtenerHistorial: async (id) => {\r\n    const response = await api.get(`/clientes/${id}/historial`);\r\n    return response.data;\r\n  },\r\n\r\n  listar: () => api.get('/clientes'),\r\n  obtenerPorId: (id) => api.get(`/clientes/${id}`),\r\n  crear: (datos) => api.post('/clientes', datos),\r\n  actualizar: (id, datos) => api.put(`/clientes/${id}`, datos),\r\n  eliminar: (id) => api.delete(`/clientes/${id}`)\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,gBAAgB,GAAG;EAC9B;EACAC,YAAY,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IACnC;IACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,WAAW,CACpCD,MAAM,CAACE,OAAO,CAACJ,MAAM,CAAC,CAACK,MAAM,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAKA,CAAC,KAAKC,SAAS,IAAID,CAAC,KAAK,EAAE,CACvE,CAAC;IACD,MAAME,QAAQ,GAAG,MAAMZ,GAAG,CAACa,GAAG,CAAC,WAAW,EAAE;MAAEV,MAAM,EAAEC;IAAY,CAAC,CAAC;IACpE,OAAOQ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,YAAY,EAAE,MAAOC,EAAE,IAAK;IAC1B,MAAMJ,QAAQ,GAAG,MAAMZ,GAAG,CAACa,GAAG,CAAC,aAAaG,EAAE,EAAE,CAAC;IACjD,OAAOJ,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAG,KAAK,EAAE,MAAOH,IAAI,IAAK;IACrB,MAAMF,QAAQ,GAAG,MAAMZ,GAAG,CAACkB,IAAI,CAAC,WAAW,EAAEJ,IAAI,CAAC;IAClD,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAK,UAAU,EAAE,MAAAA,CAAOH,EAAE,EAAEF,IAAI,KAAK;IAC9B,MAAMF,QAAQ,GAAG,MAAMZ,GAAG,CAACoB,GAAG,CAAC,aAAaJ,EAAE,EAAE,EAAEF,IAAI,CAAC;IACvD,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAO,QAAQ,EAAE,MAAOL,EAAE,IAAK;IACtB,MAAMJ,QAAQ,GAAG,MAAMZ,GAAG,CAACsB,MAAM,CAAC,aAAaN,EAAE,EAAE,CAAC;IACpD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAS,MAAM,EAAE,MAAOC,KAAK,IAAK;IACvB,MAAMZ,QAAQ,GAAG,MAAMZ,GAAG,CAACa,GAAG,CAAC,kBAAkB,EAAE;MAAEV,MAAM,EAAE;QAAEsB,CAAC,EAAED;MAAM;IAAE,CAAC,CAAC;IAC5E,OAAOZ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAY,gBAAgB,EAAE,MAAOV,EAAE,IAAK;IAC9B,MAAMJ,QAAQ,GAAG,MAAMZ,GAAG,CAACa,GAAG,CAAC,aAAaG,EAAE,YAAY,CAAC;IAC3D,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDa,MAAM,EAAEA,CAAA,KAAM3B,GAAG,CAACa,GAAG,CAAC,WAAW,CAAC;EAClCE,YAAY,EAAGC,EAAE,IAAKhB,GAAG,CAACa,GAAG,CAAC,aAAaG,EAAE,EAAE,CAAC;EAChDC,KAAK,EAAGW,KAAK,IAAK5B,GAAG,CAACkB,IAAI,CAAC,WAAW,EAAEU,KAAK,CAAC;EAC9CT,UAAU,EAAEA,CAACH,EAAE,EAAEY,KAAK,KAAK5B,GAAG,CAACoB,GAAG,CAAC,aAAaJ,EAAE,EAAE,EAAEY,KAAK,CAAC;EAC5DP,QAAQ,EAAGL,EAAE,IAAKhB,GAAG,CAACsB,MAAM,CAAC,aAAaN,EAAE,EAAE;AAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}