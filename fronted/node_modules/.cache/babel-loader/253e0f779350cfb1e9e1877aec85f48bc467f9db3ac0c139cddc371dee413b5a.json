{"ast":null,"code":"import{apiRequest}from'./api';export const servicioPagos={// Crear preferencia de pago\ncrearPreferencia:async(items,comprador)=>{try{const response=await apiRequest('/pagos/crear-preferencia',{method:'POST',body:{items,comprador}});return response;}catch(error){console.error('Error al crear preferencia de pago:',error);throw error;}},// Procesar pago exitoso\nprocesarPagoExitoso:async(paymentId,preferenceId)=>{try{const response=await apiRequest('/pagos/procesar-exitoso',{method:'POST',body:{paymentId,preferenceId}});return response;}catch(error){console.error('Error al procesar pago exitoso:',error);throw error;}},// Procesar pago fallido\nprocesarPagoFallido:async(paymentId,preferenceId,error)=>{try{const response=await apiRequest('/pagos/procesar-fallido',{method:'POST',body:{paymentId,preferenceId,error}});return response;}catch(error){console.error('Error al procesar pago fallido:',error);throw error;}},// Transbank - Crear transacción\ncrearTransaccionTransbank:async datosTransaccion=>{try{const response=await apiRequest('/transbank/crear',{method:'POST',body:datosTransaccion});return response;}catch(error){console.error('Error al crear transacción Transbank:',error);throw error;}},// Transbank - Confirmar transacción\nconfirmarTransaccionTransbank:async token=>{try{const response=await apiRequest('/transbank/confirmar',{method:'POST',body:{token_ws:token}});return response;}catch(error){console.error('Error al confirmar transacción Transbank:',error);throw error;}},// Transbank - Obtener estado de transacción\nobtenerEstadoTransaccion:async token=>{try{const response=await apiRequest(\"/transbank/estado/\".concat(token));return response;}catch(error){console.error('Error al obtener estado de transacción:',error);throw error;}},// Transbank - Reembolsar transacción\nreembolsarTransaccion:async(token,monto)=>{try{const response=await apiRequest('/transbank/reembolsar',{method:'POST',body:{token,monto}});return response;}catch(error){console.error('Error al reembolsar transacción:',error);throw error;}}};","map":{"version":3,"names":["apiRequest","servicioPagos","crearPreferencia","items","comprador","response","method","body","error","console","procesarPagoExitoso","paymentId","preferenceId","procesarPagoFallido","crearTransaccionTransbank","datosTransaccion","confirmarTransaccionTransbank","token","token_ws","obtenerEstadoTransaccion","concat","reembolsarTransaccion","monto"],"sources":["C:/ferrenuevo/fronted/src/servicios/servicioPagos.js"],"sourcesContent":["import { apiRequest } from './api';\r\n\r\nexport const servicioPagos = {\r\n  // Crear preferencia de pago\r\n  crearPreferencia: async (items, comprador) => {\r\n    try {\r\n      const response = await apiRequest('/pagos/crear-preferencia', {\r\n        method: 'POST',\r\n        body: { items, comprador }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al crear preferencia de pago:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Procesar pago exitoso\r\n  procesarPagoExitoso: async (paymentId, preferenceId) => {\r\n    try {\r\n      const response = await apiRequest('/pagos/procesar-exitoso', {\r\n        method: 'POST',\r\n        body: { paymentId, preferenceId }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al procesar pago exitoso:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Procesar pago fallido\r\n  procesarPagoFallido: async (paymentId, preferenceId, error) => {\r\n    try {\r\n      const response = await apiRequest('/pagos/procesar-fallido', {\r\n        method: 'POST',\r\n        body: { paymentId, preferenceId, error }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al procesar pago fallido:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Crear transacción\r\n  crearTransaccionTransbank: async (datosTransaccion) => {\r\n    try {\r\n      const response = await apiRequest('/transbank/crear', {\r\n        method: 'POST',\r\n        body: datosTransaccion\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al crear transacción Transbank:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Confirmar transacción\r\n  confirmarTransaccionTransbank: async (token) => {\r\n    try {\r\n      const response = await apiRequest('/transbank/confirmar', {\r\n        method: 'POST',\r\n        body: { token_ws: token }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al confirmar transacción Transbank:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Obtener estado de transacción\r\n  obtenerEstadoTransaccion: async (token) => {\r\n    try {\r\n      const response = await apiRequest(`/transbank/estado/${token}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al obtener estado de transacción:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Reembolsar transacción\r\n  reembolsarTransaccion: async (token, monto) => {\r\n    try {\r\n      const response = await apiRequest('/transbank/reembolsar', {\r\n        method: 'POST',\r\n        body: { token, monto }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al reembolsar transacción:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}