{"ast":null,"code":"import { apiRequest, obtenerPagosSinToken } from './api';\nexport const servicioPagos = {\n  // Crear preferencia de pago\n  crearPreferencia: async (items, comprador) => {\n    try {\n      const response = await apiRequest('/pagos/crear-preferencia', {\n        method: 'POST',\n        body: {\n          items,\n          comprador\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Error al crear preferencia de pago:', error);\n      throw error;\n    }\n  },\n  // Procesar pago exitoso\n  procesarPagoExitoso: async (paymentId, preferenceId) => {\n    try {\n      const response = await apiRequest('/pagos/procesar-exitoso', {\n        method: 'POST',\n        body: {\n          paymentId,\n          preferenceId\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Error al procesar pago exitoso:', error);\n      throw error;\n    }\n  },\n  // Procesar pago fallido\n  procesarPagoFallido: async (paymentId, preferenceId, error) => {\n    try {\n      const response = await apiRequest('/pagos/procesar-fallido', {\n        method: 'POST',\n        body: {\n          paymentId,\n          preferenceId,\n          error\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Error al procesar pago fallido:', error);\n      throw error;\n    }\n  },\n  // Transbank - Crear transacción\n  crearTransaccionTransbank: async datosTransaccion => {\n    try {\n      const response = await apiRequest('/transbank/crear', {\n        method: 'POST',\n        body: datosTransaccion\n      });\n      return response;\n    } catch (error) {\n      console.error('Error al crear transacción Transbank:', error);\n      throw error;\n    }\n  },\n  // Transbank - Confirmar transacción\n  confirmarTransaccionTransbank: async token => {\n    try {\n      const response = await apiRequest('/transbank/confirmar', {\n        method: 'POST',\n        body: {\n          token_ws: token\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Error al confirmar transacción Transbank:', error);\n      throw error;\n    }\n  },\n  // Transbank - Obtener estado de transacción\n  obtenerEstadoTransaccion: async token => {\n    try {\n      const response = await apiRequest(`/transbank/estado/${token}`);\n      return response;\n    } catch (error) {\n      console.error('Error al obtener estado de transacción:', error);\n      throw error;\n    }\n  },\n  // Transbank - Reembolsar transacción\n  reembolsarTransaccion: async (token, monto) => {\n    try {\n      const response = await apiRequest('/transbank/reembolsar', {\n        method: 'POST',\n        body: {\n          token,\n          monto\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Error al reembolsar transacción:', error);\n      throw error;\n    }\n  },\n  // Listar pagos (con filtros)\n  listar: async (filtros = {}) => {\n    const params = new URLSearchParams(filtros).toString();\n    return await apiRequest(`/pagos${params ? `?${params}` : ''}`);\n  },\n  // Listar pagos sin token (para endpoints públicos)\n  listarSinToken: async (filtros = {}) => {\n    return await obtenerPagosSinToken(filtros);\n  },\n  // Aprobar pago en efectivo\n  aprobar: async pagoId => {\n    return await apiRequest(`/pagos/${pagoId}/estado`, {\n      method: 'PUT',\n      body: {\n        estado: 'aprobado'\n      }\n    });\n  }\n};","map":{"version":3,"names":["apiRequest","obtenerPagosSinToken","servicioPagos","crearPreferencia","items","comprador","response","method","body","error","console","procesarPagoExitoso","paymentId","preferenceId","procesarPagoFallido","crearTransaccionTransbank","datosTransaccion","confirmarTransaccionTransbank","token","token_ws","obtenerEstadoTransaccion","reembolsarTransaccion","monto","listar","filtros","params","URLSearchParams","toString","listarSinToken","aprobar","pagoId","estado"],"sources":["C:/ferrenuevo (copia buena)/fronted/src/servicios/servicioPagos.js"],"sourcesContent":["import { apiRequest, obtenerPagosSinToken } from './api';\r\n\r\nexport const servicioPagos = {\r\n  // Crear preferencia de pago\r\n  crearPreferencia: async (items, comprador) => {\r\n    try {\r\n      const response = await apiRequest('/pagos/crear-preferencia', {\r\n        method: 'POST',\r\n        body: { items, comprador }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al crear preferencia de pago:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Procesar pago exitoso\r\n  procesarPagoExitoso: async (paymentId, preferenceId) => {\r\n    try {\r\n      const response = await apiRequest('/pagos/procesar-exitoso', {\r\n        method: 'POST',\r\n        body: { paymentId, preferenceId }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al procesar pago exitoso:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Procesar pago fallido\r\n  procesarPagoFallido: async (paymentId, preferenceId, error) => {\r\n    try {\r\n      const response = await apiRequest('/pagos/procesar-fallido', {\r\n        method: 'POST',\r\n        body: { paymentId, preferenceId, error }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al procesar pago fallido:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Crear transacción\r\n  crearTransaccionTransbank: async (datosTransaccion) => {\r\n    try {\r\n      const response = await apiRequest('/transbank/crear', {\r\n        method: 'POST',\r\n        body: datosTransaccion\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al crear transacción Transbank:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Confirmar transacción\r\n  confirmarTransaccionTransbank: async (token) => {\r\n    try {\r\n      const response = await apiRequest('/transbank/confirmar', {\r\n        method: 'POST',\r\n        body: { token_ws: token }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al confirmar transacción Transbank:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Obtener estado de transacción\r\n  obtenerEstadoTransaccion: async (token) => {\r\n    try {\r\n      const response = await apiRequest(`/transbank/estado/${token}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al obtener estado de transacción:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Reembolsar transacción\r\n  reembolsarTransaccion: async (token, monto) => {\r\n    try {\r\n      const response = await apiRequest('/transbank/reembolsar', {\r\n        method: 'POST',\r\n        body: { token, monto }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al reembolsar transacción:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Listar pagos (con filtros)\r\n  listar: async (filtros = {}) => {\r\n    const params = new URLSearchParams(filtros).toString();\r\n    return await apiRequest(`/pagos${params ? `?${params}` : ''}`);\r\n  },\r\n\r\n  // Listar pagos sin token (para endpoints públicos)\r\n  listarSinToken: async (filtros = {}) => {\r\n    return await obtenerPagosSinToken(filtros);\r\n  },\r\n\r\n  // Aprobar pago en efectivo\r\n  aprobar: async (pagoId) => {\r\n    return await apiRequest(`/pagos/${pagoId}/estado`, {\r\n      method: 'PUT',\r\n      body: { estado: 'aprobado' }\r\n    });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}