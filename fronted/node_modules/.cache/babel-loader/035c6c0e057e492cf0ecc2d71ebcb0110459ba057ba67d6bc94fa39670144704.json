{"ast":null,"code":"import api from './api';\nexport const servicioFacturas = {\n  // Emitir una nueva factura\n  emitirFactura: async datos => {\n    try {\n      const response = await api.post('/facturas/emitir', datos);\n      return response.data;\n    } catch (error) {\n      console.error('Error al emitir factura:', error);\n      throw error;\n    }\n  },\n  // Obtener todas las facturas\n  obtenerTodas: async (params = {}) => {\n    try {\n      const response = await api.get('/facturas', {\n        params\n      });\n      // El backend devuelve { success, mensaje, data }\n      // Necesitamos devolver la estructura completa para que el componente pueda acceder a data\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener facturas:', error);\n      throw error;\n    }\n  },\n  // Obtener factura por ID\n  obtenerPorId: async id => {\n    try {\n      const response = await api.get(`/facturas/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener factura:', error);\n      throw error;\n    }\n  },\n  // Actualizar estado de factura\n  actualizarEstado: async (id, estado) => {\n    try {\n      const response = await api.put(`/facturas/${id}/estado`, {\n        estado\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al actualizar estado de factura:', error);\n      throw error;\n    }\n  },\n  // Obtener estadísticas de facturas\n  obtenerEstadisticas: async (params = {}) => {\n    try {\n      const response = await api.get('/facturas/estadisticas/general', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener estadísticas:', error);\n      throw error;\n    }\n  },\n  // Obtener facturas por cliente\n  obtenerPorCliente: async clienteId => {\n    try {\n      const response = await api.get('/facturas', {\n        params: {\n          cliente_id: clienteId\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener facturas del cliente:', error);\n      throw error;\n    }\n  },\n  // Buscar facturas\n  buscar: async termino => {\n    try {\n      const response = await api.get('/facturas', {\n        params: {\n          q: termino\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al buscar facturas:', error);\n      throw error;\n    }\n  },\n  // Exportar facturas\n  exportar: async (filtros = {}) => {\n    try {\n      const response = await api.get('/facturas/exportar', {\n        params: filtros,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al exportar facturas:', error);\n      throw error;\n    }\n  },\n  // Obtener estados disponibles\n  obtenerEstados: () => {\n    return [{\n      value: 'pendiente',\n      label: 'Pendiente',\n      color: 'yellow'\n    }, {\n      value: 'pagada',\n      label: 'Pagada',\n      color: 'green'\n    }, {\n      value: 'vencida',\n      label: 'Vencida',\n      color: 'red'\n    }, {\n      value: 'cancelada',\n      label: 'Cancelada',\n      color: 'gray'\n    }];\n  },\n  // Formatear número de factura\n  formatearNumero: numero => {\n    return numero || 'N/A';\n  },\n  // Formatear fecha\n  formatearFecha: fecha => {\n    if (!fecha) return 'N/A';\n    return new Date(fecha).toLocaleDateString('es-CL');\n  },\n  // Formatear moneda\n  formatearMoneda: monto => {\n    if (!monto && monto !== 0) return 'N/A';\n    return new Intl.NumberFormat('es-CL', {\n      style: 'currency',\n      currency: 'CLP'\n    }).format(monto);\n  }\n};","map":{"version":3,"names":["api","servicioFacturas","emitirFactura","datos","response","post","data","error","console","obtenerTodas","params","get","obtenerPorId","id","actualizarEstado","estado","put","obtenerEstadisticas","obtenerPorCliente","clienteId","cliente_id","buscar","termino","q","exportar","filtros","responseType","obtenerEstados","value","label","color","formatearNumero","numero","formatearFecha","fecha","Date","toLocaleDateString","formatearMoneda","monto","Intl","NumberFormat","style","currency","format"],"sources":["C:/ferrenuevo/fronted/src/servicios/servicioFacturas.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const servicioFacturas = {\r\n  // Emitir una nueva factura\r\n  emitirFactura: async (datos) => {\r\n    try {\r\n      const response = await api.post('/facturas/emitir', datos);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al emitir factura:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener todas las facturas\r\n  obtenerTodas: async (params = {}) => {\r\n    try {\r\n      const response = await api.get('/facturas', { params });\r\n      // El backend devuelve { success, mensaje, data }\r\n      // Necesitamos devolver la estructura completa para que el componente pueda acceder a data\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener facturas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener factura por ID\r\n  obtenerPorId: async (id) => {\r\n    try {\r\n      const response = await api.get(`/facturas/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener factura:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Actualizar estado de factura\r\n  actualizarEstado: async (id, estado) => {\r\n    try {\r\n      const response = await api.put(`/facturas/${id}/estado`, { estado });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al actualizar estado de factura:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener estadísticas de facturas\r\n  obtenerEstadisticas: async (params = {}) => {\r\n    try {\r\n      const response = await api.get('/facturas/estadisticas/general', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener estadísticas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener facturas por cliente\r\n  obtenerPorCliente: async (clienteId) => {\r\n    try {\r\n      const response = await api.get('/facturas', { \r\n        params: { cliente_id: clienteId } \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener facturas del cliente:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Buscar facturas\r\n  buscar: async (termino) => {\r\n    try {\r\n      const response = await api.get('/facturas', { \r\n        params: { q: termino } \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al buscar facturas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Exportar facturas\r\n  exportar: async (filtros = {}) => {\r\n    try {\r\n      const response = await api.get('/facturas/exportar', { \r\n        params: filtros,\r\n        responseType: 'blob'\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al exportar facturas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener estados disponibles\r\n  obtenerEstados: () => {\r\n    return [\r\n      { value: 'pendiente', label: 'Pendiente', color: 'yellow' },\r\n      { value: 'pagada', label: 'Pagada', color: 'green' },\r\n      { value: 'vencida', label: 'Vencida', color: 'red' },\r\n      { value: 'cancelada', label: 'Cancelada', color: 'gray' }\r\n    ];\r\n  },\r\n\r\n  // Formatear número de factura\r\n  formatearNumero: (numero) => {\r\n    return numero || 'N/A';\r\n  },\r\n\r\n  // Formatear fecha\r\n  formatearFecha: (fecha) => {\r\n    if (!fecha) return 'N/A';\r\n    return new Date(fecha).toLocaleDateString('es-CL');\r\n  },\r\n\r\n  // Formatear moneda\r\n  formatearMoneda: (monto) => {\r\n    if (!monto && monto !== 0) return 'N/A';\r\n    return new Intl.NumberFormat('es-CL', {\r\n      style: 'currency',\r\n      currency: 'CLP'\r\n    }).format(monto);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}