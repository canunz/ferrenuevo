{"ast":null,"code":"// ==========================================\n// src/servicios/api.js - FRONTEND CORREGIDO\n// ==========================================\n\nimport axios from 'axios';\n\n// Configuración de la API\nconst API_BASE_URL = 'http://localhost:3003/api/v1';\n\n// Configuración base de axios\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Agrega el token a cada petición si existe\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Función helper para hacer requests con mejor manejo de errores\nexport const apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  console.log(`🔄 API Request: ${options.method || 'GET'} ${url}`);\n  const defaultOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    mode: 'cors',\n    // Importante para CORS\n    credentials: 'include',\n    // Para enviar cookies si es necesario\n    ...options\n  };\n\n  // Agregar body solo si no es GET\n  if (options.body && defaultOptions.method !== 'GET') {\n    defaultOptions.body = JSON.stringify(options.body);\n  }\n  try {\n    console.log(`📡 Enviando request a: ${url}`);\n    console.log(`🔧 Opciones:`, defaultOptions);\n    const response = await fetch(url, defaultOptions);\n    console.log(`📬 Response status: ${response.status}`);\n    console.log(`📬 Response headers:`, response.headers);\n\n    // Verificar si la respuesta es exitosa\n    if (!response.ok) {\n      // Intentar obtener el mensaje de error del servidor\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.message || errorData.error || errorMessage;\n      } catch (e) {\n        console.log('No se pudo parsear el error como JSON');\n      }\n      throw new Error(errorMessage);\n    }\n\n    // Intentar parsear la respuesta como JSON\n    const data = await response.json();\n    console.log(`✅ API Response exitosa:`, data);\n    return data;\n  } catch (error) {\n    console.error(`❌ API Error: ${endpoint}`, error);\n\n    // Mejorar los mensajes de error para el usuario\n    if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {\n      throw new Error('No se puede conectar al servidor. Verifica que el backend esté corriendo en http://localhost:3002');\n    }\n    if (error.name === 'AbortError') {\n      throw new Error('La petición tardó demasiado tiempo. Inténtalo de nuevo.');\n    }\n\n    // Re-lanzar el error original si no es uno conocido\n    throw error;\n  }\n};\n\n// Función para probar conexión con el backend\nexport const testBackendConnection = async () => {\n  try {\n    const response = await api.get('/test');\n    return response.data;\n  } catch (error) {\n    console.error('Error conectando con el backend:', error);\n    throw error;\n  }\n};\n\n// Función específica para verificar la salud del servidor\nconst verificarServidor = async () => {\n  try {\n    console.log('🏥 Verificando salud del servidor...');\n    const response = await fetch('http://localhost:3003/health', {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('✅ Servidor funcionando:', data);\n      return {\n        funcionando: true,\n        data\n      };\n    } else {\n      console.log('⚠️ Servidor responde pero con error:', response.status);\n      return {\n        funcionando: false,\n        error: `HTTP ${response.status}`\n      };\n    }\n  } catch (error) {\n    console.error('❌ No se puede conectar al servidor:', error);\n    return {\n      funcionando: false,\n      error: error.message\n    };\n  }\n};\n\n// API PRODUCTOS (exportación nombrada)\nexport const productosAPI = {\n  obtenerTodos: async (filtros = {}) => {\n    const params = new URLSearchParams();\n    Object.keys(filtros).forEach(key => {\n      if (filtros[key]) params.append(key, filtros[key]);\n    });\n    const endpoint = `/productos${params.toString() ? `?${params.toString()}` : ''}`;\n    return await apiRequest(endpoint);\n  },\n  obtenerPorId: async id => {\n    return await apiRequest(`/productos/${id}`);\n  },\n  crear: async producto => {\n    return await apiRequest('/productos', {\n      method: 'POST',\n      body: producto\n    });\n  },\n  actualizar: async (id, producto) => {\n    return await apiRequest(`/productos/${id}`, {\n      method: 'PUT',\n      body: producto\n    });\n  },\n  eliminar: async id => {\n    return await apiRequest(`/productos/${id}`, {\n      method: 'DELETE'\n    });\n  },\n  obtenerCategorias: async () => {\n    return await apiRequest('/productos/categorias');\n  },\n  obtenerMarcas: async () => {\n    return await apiRequest('/productos/marcas');\n  }\n};\n\n// API SISTEMA (exportación nombrada)\nexport const sistemaAPI = {\n  healthCheck: async () => {\n    const response = await fetch('http://localhost:3003/health');\n    return await response.json();\n  },\n  test: async () => {\n    return await apiRequest('/test');\n  },\n  verificarServidor: verificarServidor\n};\n\n// API CLIENTES\nexport const clientesAPI = {\n  obtenerTodos: async (filtros = {}) => {\n    const params = new URLSearchParams();\n    Object.keys(filtros).forEach(key => {\n      if (filtros[key]) params.append(key, filtros[key]);\n    });\n    const endpoint = `/clientes${params.toString() ? `?${params.toString()}` : ''}`;\n    return await apiRequest(endpoint);\n  },\n  obtenerPorId: async id => {\n    return await apiRequest(`/clientes/${id}`);\n  },\n  crear: async cliente => {\n    return await apiRequest('/clientes', {\n      method: 'POST',\n      body: cliente\n    });\n  },\n  actualizar: async (id, cliente) => {\n    return await apiRequest(`/clientes/${id}`, {\n      method: 'PUT',\n      body: cliente\n    });\n  },\n  eliminar: async id => {\n    return await apiRequest(`/clientes/${id}`, {\n      method: 'DELETE'\n    });\n  }\n};\n\n// API AUTH\nexport const authAPI = {\n  login: async credenciales => {\n    return await apiRequest('/auth/login', {\n      method: 'POST',\n      body: credenciales\n    });\n  },\n  registro: async datos => {\n    return await apiRequest('/auth/registro', {\n      method: 'POST',\n      body: datos\n    });\n  },\n  obtenerPerfil: async () => {\n    return await apiRequest('/auth/perfil');\n  },\n  actualizarPerfil: async datos => {\n    return await apiRequest('/auth/perfil', {\n      method: 'PUT',\n      body: datos\n    });\n  }\n};\n\n// API PEDIDOS\nexport const pedidosAPI = {\n  obtenerTodos: async (filtros = {}) => {\n    const params = new URLSearchParams();\n    Object.keys(filtros).forEach(key => {\n      if (filtros[key]) params.append(key, filtros[key]);\n    });\n    const endpoint = `/pedidos${params.toString() ? `?${params.toString()}` : ''}`;\n    return await apiRequest(endpoint);\n  },\n  obtenerPorId: async id => {\n    return await apiRequest(`/pedidos/${id}`);\n  },\n  crear: async pedido => {\n    return await apiRequest('/pedidos', {\n      method: 'POST',\n      body: pedido\n    });\n  },\n  actualizar: async (id, pedido) => {\n    return await apiRequest(`/pedidos/${id}`, {\n      method: 'PUT',\n      body: pedido\n    });\n  },\n  cambiarEstado: async (id, estado) => {\n    return await apiRequest(`/pedidos/${id}/estado`, {\n      method: 'PUT',\n      body: {\n        estado\n      }\n    });\n  }\n};\n\n// Exportar axios instance para uso directo\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","apiRequest","endpoint","options","url","console","log","method","defaultOptions","mode","credentials","body","JSON","stringify","response","fetch","status","ok","errorMessage","statusText","errorData","json","message","e","Error","data","name","includes","testBackendConnection","get","verificarServidor","funcionando","productosAPI","obtenerTodos","filtros","params","URLSearchParams","Object","keys","forEach","key","append","toString","obtenerPorId","id","crear","producto","actualizar","eliminar","obtenerCategorias","obtenerMarcas","sistemaAPI","healthCheck","test","clientesAPI","cliente","authAPI","login","credenciales","registro","datos","obtenerPerfil","actualizarPerfil","pedidosAPI","pedido","cambiarEstado","estado"],"sources":["C:/ferrenuevo/fronted/src/servicios/api.js"],"sourcesContent":["// ==========================================\r\n// src/servicios/api.js - FRONTEND CORREGIDO\r\n// ==========================================\r\n\r\nimport axios from 'axios';\r\n\r\n// Configuración de la API\r\nconst API_BASE_URL = 'http://localhost:3003/api/v1';\r\n\r\n// Configuración base de axios\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Agrega el token a cada petición si existe\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Función helper para hacer requests con mejor manejo de errores\r\nexport const apiRequest = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  console.log(`🔄 API Request: ${options.method || 'GET'} ${url}`);\r\n  \r\n  const defaultOptions = {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    mode: 'cors', // Importante para CORS\r\n    credentials: 'include', // Para enviar cookies si es necesario\r\n    ...options,\r\n  };\r\n\r\n  // Agregar body solo si no es GET\r\n  if (options.body && defaultOptions.method !== 'GET') {\r\n    defaultOptions.body = JSON.stringify(options.body);\r\n  }\r\n\r\n  try {\r\n    console.log(`📡 Enviando request a: ${url}`);\r\n    console.log(`🔧 Opciones:`, defaultOptions);\r\n    \r\n    const response = await fetch(url, defaultOptions);\r\n    \r\n    console.log(`📬 Response status: ${response.status}`);\r\n    console.log(`📬 Response headers:`, response.headers);\r\n    \r\n    // Verificar si la respuesta es exitosa\r\n    if (!response.ok) {\r\n      // Intentar obtener el mensaje de error del servidor\r\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\r\n      \r\n      try {\r\n        const errorData = await response.json();\r\n        errorMessage = errorData.message || errorData.error || errorMessage;\r\n      } catch (e) {\r\n        console.log('No se pudo parsear el error como JSON');\r\n      }\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    // Intentar parsear la respuesta como JSON\r\n    const data = await response.json();\r\n    console.log(`✅ API Response exitosa:`, data);\r\n    \r\n    return data;\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ API Error: ${endpoint}`, error);\r\n    \r\n    // Mejorar los mensajes de error para el usuario\r\n    if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {\r\n      throw new Error('No se puede conectar al servidor. Verifica que el backend esté corriendo en http://localhost:3002');\r\n    }\r\n    \r\n    if (error.name === 'AbortError') {\r\n      throw new Error('La petición tardó demasiado tiempo. Inténtalo de nuevo.');\r\n    }\r\n    \r\n    // Re-lanzar el error original si no es uno conocido\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Función para probar conexión con el backend\r\nexport const testBackendConnection = async () => {\r\n  try {\r\n    const response = await api.get('/test');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error conectando con el backend:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Función específica para verificar la salud del servidor\r\nconst verificarServidor = async () => {\r\n  try {\r\n    console.log('🏥 Verificando salud del servidor...');\r\n    const response = await fetch('http://localhost:3003/health', {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n      }\r\n    });\r\n    \r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log('✅ Servidor funcionando:', data);\r\n      return { funcionando: true, data };\r\n    } else {\r\n      console.log('⚠️ Servidor responde pero con error:', response.status);\r\n      return { funcionando: false, error: `HTTP ${response.status}` };\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ No se puede conectar al servidor:', error);\r\n    return { funcionando: false, error: error.message };\r\n  }\r\n};\r\n\r\n// API PRODUCTOS (exportación nombrada)\r\nexport const productosAPI = {\r\n  obtenerTodos: async (filtros = {}) => {\r\n    const params = new URLSearchParams();\r\n    Object.keys(filtros).forEach(key => {\r\n      if (filtros[key]) params.append(key, filtros[key]);\r\n    });\r\n    \r\n    const endpoint = `/productos${params.toString() ? `?${params.toString()}` : ''}`;\r\n    return await apiRequest(endpoint);\r\n  },\r\n\r\n  obtenerPorId: async (id) => {\r\n    return await apiRequest(`/productos/${id}`);\r\n  },\r\n\r\n  crear: async (producto) => {\r\n    return await apiRequest('/productos', {\r\n      method: 'POST',\r\n      body: producto,\r\n    });\r\n  },\r\n\r\n  actualizar: async (id, producto) => {\r\n    return await apiRequest(`/productos/${id}`, {\r\n      method: 'PUT',\r\n      body: producto,\r\n    });\r\n  },\r\n\r\n  eliminar: async (id) => {\r\n    return await apiRequest(`/productos/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  },\r\n\r\n  obtenerCategorias: async () => {\r\n    return await apiRequest('/productos/categorias');\r\n  },\r\n\r\n  obtenerMarcas: async () => {\r\n    return await apiRequest('/productos/marcas');\r\n  },\r\n};\r\n\r\n// API SISTEMA (exportación nombrada)\r\nexport const sistemaAPI = {\r\n  healthCheck: async () => {\r\n    const response = await fetch('http://localhost:3003/health');\r\n    return await response.json();\r\n  },\r\n  \r\n  test: async () => {\r\n    return await apiRequest('/test');\r\n  },\r\n  \r\n  verificarServidor: verificarServidor,\r\n};\r\n\r\n// API CLIENTES\r\nexport const clientesAPI = {\r\n  obtenerTodos: async (filtros = {}) => {\r\n    const params = new URLSearchParams();\r\n    Object.keys(filtros).forEach(key => {\r\n      if (filtros[key]) params.append(key, filtros[key]);\r\n    });\r\n    \r\n    const endpoint = `/clientes${params.toString() ? `?${params.toString()}` : ''}`;\r\n    return await apiRequest(endpoint);\r\n  },\r\n\r\n  obtenerPorId: async (id) => {\r\n    return await apiRequest(`/clientes/${id}`);\r\n  },\r\n\r\n  crear: async (cliente) => {\r\n    return await apiRequest('/clientes', {\r\n      method: 'POST',\r\n      body: cliente,\r\n    });\r\n  },\r\n\r\n  actualizar: async (id, cliente) => {\r\n    return await apiRequest(`/clientes/${id}`, {\r\n      method: 'PUT',\r\n      body: cliente,\r\n    });\r\n  },\r\n\r\n  eliminar: async (id) => {\r\n    return await apiRequest(`/clientes/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  },\r\n};\r\n\r\n// API AUTH\r\nexport const authAPI = {\r\n  login: async (credenciales) => {\r\n    return await apiRequest('/auth/login', {\r\n      method: 'POST',\r\n      body: credenciales,\r\n    });\r\n  },\r\n\r\n  registro: async (datos) => {\r\n    return await apiRequest('/auth/registro', {\r\n      method: 'POST',\r\n      body: datos,\r\n    });\r\n  },\r\n\r\n  obtenerPerfil: async () => {\r\n    return await apiRequest('/auth/perfil');\r\n  },\r\n\r\n  actualizarPerfil: async (datos) => {\r\n    return await apiRequest('/auth/perfil', {\r\n      method: 'PUT',\r\n      body: datos,\r\n    });\r\n  },\r\n};\r\n\r\n// API PEDIDOS\r\nexport const pedidosAPI = {\r\n  obtenerTodos: async (filtros = {}) => {\r\n    const params = new URLSearchParams();\r\n    Object.keys(filtros).forEach(key => {\r\n      if (filtros[key]) params.append(key, filtros[key]);\r\n    });\r\n    \r\n    const endpoint = `/pedidos${params.toString() ? `?${params.toString()}` : ''}`;\r\n    return await apiRequest(endpoint);\r\n  },\r\n\r\n  obtenerPorId: async (id) => {\r\n    return await apiRequest(`/pedidos/${id}`);\r\n  },\r\n\r\n  crear: async (pedido) => {\r\n    return await apiRequest('/pedidos', {\r\n      method: 'POST',\r\n      body: pedido,\r\n    });\r\n  },\r\n\r\n  actualizar: async (id, pedido) => {\r\n    return await apiRequest(`/pedidos/${id}`, {\r\n      method: 'PUT',\r\n      body: pedido,\r\n    });\r\n  },\r\n\r\n  cambiarEstado: async (id, estado) => {\r\n    return await apiRequest(`/pedidos/${id}/estado`, {\r\n      method: 'PUT',\r\n      body: { estado },\r\n    });\r\n  },\r\n};\r\n\r\n// Exportar axios instance para uso directo\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}