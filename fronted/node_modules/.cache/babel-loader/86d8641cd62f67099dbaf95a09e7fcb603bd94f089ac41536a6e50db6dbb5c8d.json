{"ast":null,"code":"import { productosAPI } from './api';\nexport const servicioProductos = {\n  // Obtener todos los productos\n  obtenerTodos: async (params = {}) => {\n    try {\n      // Usar el endpoint de inventario para traer todos los productos completos\n      const response = await import('./servicioInventario').then(mod => mod.obtenerProductosCompletos(params));\n      // Adaptar la respuesta para que sea compatible con el resto del frontend\n      if (response.data && Array.isArray(response.data.data)) {\n        return {\n          success: true,\n          data: response.data.data\n        };\n      } else if (response.data && Array.isArray(response.data)) {\n        return {\n          success: true,\n          data: response.data\n        };\n      } else {\n        return {\n          success: false,\n          data: []\n        };\n      }\n    } catch (error) {\n      console.error('Error al obtener productos:', error);\n      throw error;\n    }\n  },\n  // Obtener producto por ID\n  obtenerPorId: async id => {\n    try {\n      const response = await productosAPI.obtenerPorId(id);\n      return response;\n    } catch (error) {\n      console.error('Error al obtener producto:', error);\n      throw error;\n    }\n  },\n  // Crear nuevo producto\n  crear: async data => {\n    try {\n      const response = await productosAPI.crear(data);\n      return response;\n    } catch (error) {\n      console.error('Error al crear producto:', error);\n      throw error;\n    }\n  },\n  // Actualizar producto\n  actualizar: async (id, data) => {\n    try {\n      const response = await productosAPI.actualizar(id, data);\n      return response;\n    } catch (error) {\n      console.error('Error al actualizar producto:', error);\n      throw error;\n    }\n  },\n  // Eliminar producto\n  eliminar: async id => {\n    try {\n      const response = await productosAPI.eliminar(id);\n      return response;\n    } catch (error) {\n      console.error('Error al eliminar producto:', error);\n      throw error;\n    }\n  },\n  // Buscar productos\n  buscar: async (query, filtros = {}) => {\n    try {\n      // Usar el endpoint de búsqueda del backend\n      const params = {\n        q: query,\n        ...filtros\n      };\n      const response = await productosAPI.obtenerTodos(params);\n      return response;\n    } catch (error) {\n      console.error('Error al buscar productos:', error);\n      throw error;\n    }\n  },\n  // Obtener categorías\n  obtenerCategorias: async () => {\n    try {\n      const response = await productosAPI.obtenerCategorias();\n      return response;\n    } catch (error) {\n      console.error('Error al obtener categorías:', error);\n      throw error;\n    }\n  },\n  // Obtener marcas\n  obtenerMarcas: async () => {\n    try {\n      const response = await productosAPI.obtenerMarcas();\n      return response;\n    } catch (error) {\n      console.error('Error al obtener marcas:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["productosAPI","servicioProductos","obtenerTodos","params","response","then","mod","obtenerProductosCompletos","data","Array","isArray","success","error","console","obtenerPorId","id","crear","actualizar","eliminar","buscar","query","filtros","q","obtenerCategorias","obtenerMarcas"],"sources":["C:/ferrenuevo/fronted/src/servicios/servicioProductos.js"],"sourcesContent":["import { productosAPI } from './api';\r\n\r\nexport const servicioProductos = {\r\n  // Obtener todos los productos\r\n  obtenerTodos: async (params = {}) => {\r\n    try {\r\n      // Usar el endpoint de inventario para traer todos los productos completos\r\n      const response = await import('./servicioInventario').then(mod => mod.obtenerProductosCompletos(params));\r\n      // Adaptar la respuesta para que sea compatible con el resto del frontend\r\n      if (response.data && Array.isArray(response.data.data)) {\r\n        return { success: true, data: response.data.data };\r\n      } else if (response.data && Array.isArray(response.data)) {\r\n        return { success: true, data: response.data };\r\n      } else {\r\n        return { success: false, data: [] };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener productos:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener producto por ID\r\n  obtenerPorId: async (id) => {\r\n    try {\r\n      const response = await productosAPI.obtenerPorId(id);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al obtener producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Crear nuevo producto\r\n  crear: async (data) => {\r\n    try {\r\n      const response = await productosAPI.crear(data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al crear producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Actualizar producto\r\n  actualizar: async (id, data) => {\r\n    try {\r\n      const response = await productosAPI.actualizar(id, data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al actualizar producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Eliminar producto\r\n  eliminar: async (id) => {\r\n    try {\r\n      const response = await productosAPI.eliminar(id);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al eliminar producto:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Buscar productos\r\n  buscar: async (query, filtros = {}) => {\r\n    try {\r\n      // Usar el endpoint de búsqueda del backend\r\n      const params = { q: query, ...filtros };\r\n      const response = await productosAPI.obtenerTodos(params);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al buscar productos:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener categorías\r\n  obtenerCategorias: async () => {\r\n    try {\r\n      const response = await productosAPI.obtenerCategorias();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al obtener categorías:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener marcas\r\n  obtenerMarcas: async () => {\r\n    try {\r\n      const response = await productosAPI.obtenerMarcas();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error al obtener marcas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}